// Copyright (C) 2020-2021 Parity Technologies (UK) Ltd. & Centrality Investments Ltd
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! RPC API for Ethy.

#![warn(missing_docs)]

use cennznet_primitives::eth::{EventId, ETHY_ENGINE_ID};
use ethy_gadget::notification::EthyEventProofStream;
use futures::{FutureExt, StreamExt};
use jsonrpsee::{core::RpcResult, proc_macros::rpc, PendingSubscription};
use log::warn;
use sc_client_api::backend::AuxStore;
use sc_rpc::SubscriptionTaskExecutor;
use std::sync::Arc;

mod notification;

// /// RPC Metadata.
// ///
// /// Manages persistent session for transports that support it
// /// and may contain some additional info extracted from specific transports
// /// (like remote client IP address, request headers, etc)
// #[derive(Default, Clone)]
// pub struct Metadata {
// 	session: Option<Arc<Session>>,
// }

// impl jsonrpc_core::Metadata for Metadata {}
//
// impl jsonrpc_core::calls::Metadata for Metadata {}
//
// impl PubSubMetadata for Metadata {
// 	fn session(&self) -> Option<Arc<Session>> {
// 		self.session.clone()
// 	}
// }

/// Provides RPC methods for interacting with Ethy.
#[allow(clippy::needless_return)]
#[rpc(client, server, namespace = "ethy")]
pub trait EthyApi<Notification> {
	/// Returns event proofs generated by Ethy
	#[subscription(name = "subscribeEventProofs" => "eventProofs", unsubscribe = "unsubscribeEventProofs", item = Notification)]
	fn subscribe_event_proofs(&self);

	// /// Unsubscribe from receiving notifications about recently finalized blocks.
	// #[subscription(unsubscribe = "eventProofs", name = "unsubscribeEventProofs")]
	// fn unsubscribe_event_proofs(&self, metadata: Option<Metadata>, id: SubscriptionId) -> RpcResult<bool>;

	/// Query a proof for a known event Id. Returns `null` if missing
	#[method(name = "getEventProof")]
	fn get_event_proof(&self, event_id: EventId) -> RpcResult<Option<Notification>>;
}

/// Implements the EthyApi RPC trait for interacting with Ethy.
pub struct EthyRpcHandler<BE> {
	event_proof_stream: EthyEventProofStream,
	executor: SubscriptionTaskExecutor,
	backend: Arc<BE>,
}

impl<BE> EthyRpcHandler<BE> {
	/// Creates a new EthyRpcHandler instance.
	pub fn new(event_proof_stream: EthyEventProofStream, executor: SubscriptionTaskExecutor, backend: Arc<BE>) -> Self {
		Self {
			event_proof_stream,
			executor,
			backend,
		}
	}
}

impl<BE> EthyApiServer<notification::EventProofResponse> for EthyRpcHandler<BE>
where
	BE: Send + Sync + 'static + AuxStore,
{
	fn subscribe_event_proofs(&self, pending: PendingSubscription) {
		let stream = self
			.event_proof_stream
			.subscribe()
			.map(|x| notification::EventProofResponse::new(x));

		let fut = async move {
			if let Some(mut sink) = pending.accept() {
				sink.pipe_from_stream(stream).await;
			}
		};

		self.executor
			.spawn("cennznet-rpc-subscription", Some("rpc"), fut.boxed());
	}

	fn get_event_proof(&self, event_id: EventId) -> RpcResult<Option<notification::EventProofResponse>> {
		if let Ok(maybe_encoded_proof) = self
			.backend
			.get_aux([&ETHY_ENGINE_ID[..], &event_id.to_be_bytes()[..]].concat().as_ref())
		{
			if let Some(encoded_proof) = maybe_encoded_proof {
				return Ok(Some(notification::EventProofResponse::from_raw(encoded_proof)));
			}
		}
		Ok(None)
	}
}
