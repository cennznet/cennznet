// Copyright (C) 2020-2021 Parity Technologies (UK) Ltd. & Centrality Investments Ltd
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! RPC API for Ethy.

#![warn(missing_docs)]

use cennznet_primitives::eth::{EventId, ETHY_ENGINE_ID};
use ethy_gadget::notification::EthyEventProofStream;
use futures::{FutureExt, SinkExt, StreamExt};
use jsonrpc_core::Result;
use jsonrpc_derive::rpc;
use jsonrpc_pubsub::{manager::SubscriptionManager, typed::Subscriber, SubscriptionId};
use log::warn;
use sc_client_api::backend::AuxStore;
use std::sync::Arc;

mod notification;

/// Provides RPC methods for interacting with Ethy.
#[allow(clippy::needless_return)]
#[rpc]
pub trait EthyApi<Notification> {
	/// RPC Metadata
	type Metadata;

	/// Returns event proofs generated by Ethy
	#[pubsub(subscription = "ethy_eventProofs", subscribe, name = "ethy_subscribeEventProofs")]
	fn subscribe_event_proofs(&self, metadata: Self::Metadata, subscriber: Subscriber<Notification>);

	/// Unsubscribe from receiving notifications about recently finalized blocks.
	#[pubsub(subscription = "ethy_eventProofs", unsubscribe, name = "ethy_unsubscribeEventProofs")]
	fn unsubscribe_event_proofs(
		&self,
		metadata: Option<Self::Metadata>,
		id: SubscriptionId,
	) -> jsonrpc_core::Result<bool>;

	/// Query a proof for a known event Id. Returns `null` if missing
	#[rpc(name = "ethy_getEventProof")]
	fn get_event_proof(&self, event_id: EventId) -> Result<Option<Notification>>;
}

/// Implements the EthyApi RPC trait for interacting with Ethy.
pub struct EthyRpcHandler<BE> {
	event_proof_stream: EthyEventProofStream,
	manager: SubscriptionManager,
	backend: Arc<BE>,
}

impl<BE> EthyRpcHandler<BE> {
	/// Creates a new EthyRpcHandler instance.
	pub fn new<E>(event_proof_stream: EthyEventProofStream, executor: E, backend: Arc<BE>) -> Self
	where
		E: futures::task::Spawn + Send + Sync + 'static,
	{
		let manager = SubscriptionManager::new(Arc::new(executor));
		Self {
			event_proof_stream,
			manager,
			backend,
		}
	}
}

impl<BE> EthyApi<notification::EventProofResponse> for EthyRpcHandler<BE>
where
	BE: Send + Sync + 'static + AuxStore,
{
	type Metadata = sc_rpc::Metadata;

	fn subscribe_event_proofs(
		&self,
		_metadata: Self::Metadata,
		subscriber: Subscriber<notification::EventProofResponse>,
	) {
		let stream = self
			.event_proof_stream
			.subscribe()
			.map(|x| Ok::<_, ()>(Ok(notification::EventProofResponse::new(x))));

		self.manager.add(subscriber, |sink| {
			stream
				.forward(sink.sink_map_err(|e| warn!("Error sending notifications: {:?}", e)))
				.map(|_| ())
		});
	}

	fn unsubscribe_event_proofs(
		&self,
		_metadata: Option<Self::Metadata>,
		id: SubscriptionId,
	) -> jsonrpc_core::Result<bool> {
		Ok(self.manager.cancel(id))
	}

	fn get_event_proof(&self, event_id: EventId) -> jsonrpc_core::Result<Option<notification::EventProofResponse>> {
		if let Ok(maybe_encoded_proof) = self
			.backend
			.get_aux([&ETHY_ENGINE_ID[..], &event_id.to_be_bytes()[..]].concat().as_ref())
		{
			if let Some(encoded_proof) = maybe_encoded_proof {
				return Ok(Some(notification::EventProofResponse::from_raw(encoded_proof)));
			}
		}
		Ok(None)
	}
}
