version: 2.1
commands:
  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            sudo apt-get update
            sudo apt-get -y install apt-utils cmake pkg-config libssl-dev git llvm clang
            if [ ! -d /home/circleci/.cargo ]; then
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            fi
            source ~/.cargo/env
            rustup install $RUST_VERSION
            rustup default $RUST_VERSION
            rustup target add --toolchain=$RUST_VERSION wasm32-unknown-unknown
            rustup target add --toolchain=$RUST_VERSION x86_64-unknown-linux-musl
            rustc --version; cargo --version; rustup --version
  install-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            SCCACHE_VERSION=0.2.10
            SCCACHE="sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl"
            SCCACHE_ARCHIVE="${SCCACHE}.tar.gz"
            SCCACHE_URL="https://github.com/mozilla/sccache/releases/download/${SCCACHE_VERSION}/${SCCACHE_ARCHIVE}"
            curl -L "${SCCACHE_URL}" | tar -xz
            chmod +x $SCCACHE/sccache
            mv $SCCACHE/sccache ~/.cargo/bin/sccache
            sccache --version
  restore-cache:
    steps:
      - restore_cache:
          name: Restore sccache
          key: sccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-cache:
    steps:
      - save_cache:
          name: Save sccache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
  save-target-cache:
    steps:
      - save_cache:
          name: Save target cache
          paths:
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/debug/incremental
            - runtime/wasm/target/
          key: target-cache-{{ arch }}-{{ checksum ".circleci/RUST_VERSION" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ epoch }}
  restore-target-cache:
    steps:
      - restore_cache:
          name: Restore target cache
          key: target-cache-{{ arch }}-{{ checksum ".circleci/RUST_VERSION" }}-{{ .Environment.CIRCLE_BRANCH }}
  cargo-check:
    steps:
      - run:
          name: Build
          command: |
            cargo check
          no_output_timeout: 30m
  cargo-build-test:
    steps:
      - run:
          name: Build tests
          command: |
            cargo test --no-run --all
  cargo-run-test:
    steps:
      - run:
          name: Run tests
          command: |
            cargo test --all
  docker-build-and-publish:
    steps:
      - run:
          name: Build and publish Docker image
          command: |
            IMAGE_NAME="cennznet/cennznet"
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              IMAGE_TAG="latest"
            else
              IMAGE_TAG="${CIRCLE_BRANCH////-}-${CIRCLE_SHA1:0:7}"
            fi
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker build --pull -t $IMAGE_NAME:$IMAGE_TAG -f ./Dockerfile .
            docker push $IMAGE_NAME:$IMAGE_TAG
          no_output_timeout: 60m

jobs:
  build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run: echo "successfully built and tested"
  build-bin:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      BASH_ENV: ~/.cargo/env
      RUST_VERSION: nightly-2019-10-14
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 10G
    steps:
      - checkout
      - install-rust
      - install-sccache
      - restore-cache
      - restore-target-cache
      - cargo-check
      - save-cache
      - save-target-cache
  build-test-and-run:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      BASH_ENV: ~/.cargo/env
      RUST_VERSION: nightly-2019-10-14
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 10G
    steps:
      - checkout
      - install-rust
      - install-sccache
      - restore-cache
      - restore-target-cache
      - cargo-build-test
      - save-cache
      - save-target-cache
      - cargo-run-test
  build-docker-and-publish:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - docker-build-and-publish

workflows:
  version: 2
  build-test-publish:
    jobs:
      - build-bin
      - build-test-and-run
      - build-docker-and-publish:
          filters:
            branches:
              only:
                - develop
                - /^[0-9]+[.][0-9]+[.][0-9](-rc.+)?$/
      - build:
          requires:
            - build-bin
            - build-test-and-run
            - build-docker-and-publish
