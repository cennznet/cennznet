name: Release

on:
  workflow_run:
    workflows: ["CI"]
    branches:
      - "release/*"
    types:
      - "completed"

jobs:
  release-to-github:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: [self-hosted, linux]
    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Find release version
        id: find_version
        run: |
          echo ::set-output name=tag_name::$(grep version Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
      - name: Tag the release ðŸš€
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.find_version.outputs.tag_name }}
          release_name: ${{ steps.find_version.outputs.tag_name }}
          # 'rc' is a pre-release
          prerelease: ${{ contains(steps.find_version.outputs.tag_name, 'rc') }}
      ### build the wasm runtime for publishing
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-08-01
          components: rustfmt
          target: wasm32-unknown-unknown
          default: true
      - name: Build wasm (again)
        run: cargo build
      - name: Publish runtime wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./target/debug/wbuild/cennznet-runtime/cennznet_runtime.compact.wasm
          asset_name: cennznet_runtime.compact.wasm
          asset_content_type: application/wasm
  on-success:
    needs: release-to-github
    if: ${{ github.event.workflow_run.conclusion == 'success' && success() }}
    runs-on: ubuntu-latest
    steps:
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_MESSAGE: "Release success :rocket:"
          SLACK_USERNAME: "CENNZnet status"
          SLACK_ICON_EMOJI: ":white_check_mark:"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
